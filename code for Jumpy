#import libraries
import os.path
import pygame
import random
import os
from pygame import mixer
from spritesheet import SpriteSheet
from enemy import Enemy
from pygame.locals import *
import pygbag
import asyncio



#initialise pygame
pygame.init()
mixer.init()

#game window
WIDTH = 1000
HEIGHT = 1200

#create game window
screen = pygame.display.set_mode((WIDTH, HEIGHT))

pygame.display.set_caption('Jumpy')
#FPS
clock = pygame.time.Clock()
fps = 60
#load music and sound
pygame.mixer.music.load('assets_music.mp3')
pygame.mixer.music.set_volume(0.1)
pygame.mixer.music.play(-1, 0.0)
jump_sf = pygame.mixer.Sound('assets_jump.mp3')
jump_sf.set_volume(0.5)
dead_fx = pygame.mixer.Sound('assets_death.mp3')
dead_fx.set_volume(0.5)


#game variables
GRAVITY = 1
MAX_PLATFORMS = 14
SCROLL_THRESH = 750
bg_scroll = 0
game_over = False
score = 0
scroll = 0
fade_counter = 0
pause = False

if os.path.exists('score1.txt'):
    with open('score1.txt', 'r') as file:
        high_score = int(file.read())
else:
    high_score = 0


#define colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
PANEL = (0, 50, 255)


#define fond
fond_small = pygame.font.SysFont("Dimbo", 150)
fond_big = pygame.font.SysFont("Dimbo", 200)
fond_score = pygame.font.SysFont("Dimbo", 50)
fond_pres_space = pygame.font.SysFont("Dimbo", 100)

#load images
jumpy_img = pygame.image.load('jump (1).png  ').convert_alpha()
bg_image = pygame.image.load('player6.png').convert_alpha()
platform_img = pygame.image.load('wood (1).png').convert_alpha()
#bird sprites
bird_sheet_img = pygame.image.load('bird (1).png').convert_alpha()
bird_sheet = SpriteSheet(bird_sheet_img)

#drawing text on the screen
def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

#function for drawing info panel
def draw_panel():
    pygame.draw.rect(screen, PANEL,(0, 0, WIDTH, 70))
    pygame.draw.line(screen, WHITE, (0, 70), (WIDTH, 70))
    draw_text('SCORE:' + str(score), fond_score, WHITE, 20, 10)


#drawing bg
def draw_bg(bg_scroll):
    screen.blit(bg_image, (0, 0 + bg_scroll))
    screen.blit(bg_image, (0, -1200 + bg_scroll))

#player class
class Player():
    def __init__(self, x, y):
        self.image = pygame.transform.scale(jumpy_img, (65, 65))
        self.width = 40
        self.height = 50
        self.rect = pygame.Rect(0, 0, self.width, self.height)
        self.rect.center = (x, y)
        self.vel_y = 0
        self.flip = False
    def move(self):
        #reset variables
        scroll = 0
        dx = 0
        dy = 0


        #keyboard
        key = pygame.key.get_pressed()
        if key[pygame.K_a]:
            dx = -10
            self.flip = True
        if key[pygame.K_d]:
            dx = +10
            self.flip = False

        #gravity
        self.vel_y += GRAVITY
        dy += self.vel_y

        #not off screen
        if self.rect.left + dx < 0:
            dx =  - self.rect.left
        if self.rect.right + dx > WIDTH:
            dx = WIDTH  - self.rect.right


        #platfoms cillisons
        for platform in platform_group:
            if platform.rect.colliderect(self.rect.x, self.rect.y + dy, self.width, self.height):
                #abouve platform
                if self.rect.bottom < platform.rect.centery:
                    if self.vel_y > 1:
                        self.rect.bottom = platform.rect.top
                        self.vel_y = -28
                        jump_sf.play()





        #scrolling up on screen
        if self.rect.top <= SCROLL_THRESH:
            if self.vel_y < 1:
                scroll = -dy

        #update position
        self.rect.x += dx
        self.rect.y += dy + scroll

        #update mask
        self.mask = pygame.mask.from_surface(self.image)

        return scroll




    def draw(self):
        screen.blit(pygame.transform.flip(self.image,self.flip, False),(self.rect.x - 12, self.rect.y -36))


#platform
class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, moving):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(platform_img, (width, 20))
        self.moving = moving
        self.move_counter = random.randint(0, 50)
        self.direction = random.choice([-1, 1])
        self.speed = random.randint(1, 3)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

    def update(self, scroll):

        #move platform side to side
        if self.moving == True:
            self.move_counter += 1
            self.rect.x += self.direction * self.speed

        #change platform direction
        if self.move_counter >= 250 or self.rect.left < 0 or self.rect.right > WIDTH:
            self.direction *= -1
            self.move_counter = 0




        #update platforms y possition
        self.rect.y += scroll

        #stop rendering platforms
        if self.rect.top > HEIGHT:
            self.kill()

#player instance
jumpy = Player(WIDTH // 2, HEIGHT -50)

#create sprite groups
platform_group = pygame.sprite.Group()
enemy_group = pygame.sprite.Group()


#starting platform
platform = Platform(WIDTH // 2 - 50, HEIGHT - 20, 150, False)
platform_group.add(platform)


#MAIN GAME LOOP------------------------------------------------------------------------------------------
run = True
while run:


    if game_over == False:
        clock.tick(fps)

        scroll = jumpy.move()

        #draw bg
        bg_scroll += scroll
        if bg_scroll >= 1200:
            bg_scroll = 0
        draw_bg(bg_scroll)

        #spawn more platforms
        if len(platform_group) < MAX_PLATFORMS:
            p_w = random.randint(50, 125)
            p_x = random.randint(50, WIDTH - p_w)
            p_y = platform.rect.y - random.randint(80, 120)
            p_type = random.randint(1, 2)
            if p_type == 1 and score > 300:
                p_moving = True
            else:
                p_moving = False
            platform = Platform(p_x, p_y, p_w, p_moving)
            platform_group.add(platform)


        platform_group.update(scroll)

        #generate enemies
        if len(enemy_group) == 0 and score > 1500:
            enemy = Enemy(WIDTH, 100, bird_sheet, 2.5)
            enemy_group.add(enemy)

        if len(enemy_group) == 1 and score > 2500:
            enemy = Enemy(WIDTH, 120, bird_sheet, 2.5)
            enemy_group.add(enemy)



        #update enemies
        enemy_group.update(scroll, WIDTH)

        #update scroll
        if scroll > 1:
            score += scroll

        #draw line at previous high score
        pygame.draw.line(screen, WHITE, (0, score - high_score + SCROLL_THRESH),(WIDTH, score - high_score + SCROLL_THRESH))
        draw_text('HIGH SCORE', fond_score, WHITE, WIDTH - 210, score - high_score + SCROLL_THRESH)

        #draw sprites
        platform_group.draw(screen)
        enemy_group.draw(screen)
        jumpy.draw()

        #draw panel
        draw_panel()

        #check game over
        if jumpy.rect.top > HEIGHT:
            game_over = True
            dead_fx.play()
        #check for collision with enemies
        if pygame.sprite.spritecollide(jumpy, enemy_group, False):
            if pygame.sprite.spritecollide(jumpy, enemy_group, False, pygame.sprite.collide_mask):
                game_over = True
                dead_fx.play()
    else:
        if fade_counter < WIDTH:
            fade_counter += 5
            for y in range(0, 6, 2):
                pygame.draw.rect(screen, BLACK, (0, 0, fade_counter, HEIGHT / 2))
                pygame.draw.rect(screen, BLACK, (WIDTH - fade_counter, HEIGHT / 2, WIDTH, HEIGHT / 2))
        else:
            draw_text('GAME OVER!', fond_big, WHITE, 100, 500)
            draw_text('SCORE: ' + str(score), fond_score, WHITE,50, 50)
            draw_text('PRESS SPACE TO PLAY AGAIN', fond_pres_space, WHITE, 10, 720)
            #update high score
            if score > high_score:
                high_score = score
                with open('score1.txt', 'w') as file:
                    file.write(str(high_score))
            key = pygame.key.get_pressed()
            if key[pygame.K_SPACE]:
                #reset variables
                game_over = False
                score = 0
                scroll = 0
                fade_counter = 0
                #reposition jumpy
                jumpy.rect.center = (WIDTH // 2, HEIGHT - 50)
                #reset enemies
                enemy_group.empty()
                #reset platforms
                platform_group.empty()
                platform = Platform(WIDTH // 2 - 50, HEIGHT - 20, 150, False)
                platform_group.add(platform)

    #event handler
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            # update high score
            if score > high_score:
                high_score = score
                with open('score1.txt', 'w') as file:
                    file.write(str(high_score))
            run = False




    #update screen
    pygame.display.update()


pygame.quit()
